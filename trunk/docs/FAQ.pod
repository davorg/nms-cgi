=head1 NAME

Frequently Asked Questions about the I<nms> CGI programs ( $Date: 2002-01-22 20:42:56 $ )

=head1 DESCRIPTION

This document seeks to answer some of the questions that people might
want to ask about the I<nms> project and the programs therein.

=head2 What is this I<nms> thing all about ?

I<nms> is an attempt to provide replacements for all of the scripts from
Matt's Script Archive. MSA is probably the most well-known archive of
CGI programs currently available on the web. Among the Perl community,
the MSA scripts are known to be badly-written, buggy and insecure.

I<nms> was started when a group of Perl programmers got tired of telling
people not to use Matt's programs and getting the reply "But what shall I
use instead?"

=head2 But there are perfectly good programs already out there, why bother ?

Actually, there aren't really.

Most CGI programs that are available for free download really aren't very
good at all. Most of them seem to be written by people with very little
knowledge of Perl.

Many of the developers on I<nms> have been very active in the Perl community
for years. They know Perl and CGI programming very well.

The problems with most other CGI programs, fall into three categories:

=over 4

=item 1

The programs are insecure. Putting a CGI program on your web site is very 
risky. It means that you are allowing anyone to run a program on your web
server. Unless these programs have been written very carefully, you may
be allowing unscrupulous people (known as crackers) to gain access to more
information then you intend. Eventually the crackers may be able to take
control of your web server.

Perl makes it very easy to write secure programs. Unfortunately, most CGI
program authors don't seem to know this.

=item 2

The programs are buggy. Many of the other programs have had no kind of
code review. This means that they often still have bugs in which can cause
problems on your web site. You may be the first person to discover this
bug. The support you get from the authors of these programs can be very
patchy. I have never got a reply from Matt Wright when I've reported a
bug in his scripts.

The I<nms> project has a large number of developers, therefore each line of
code has been seen by many people. The chances of bugs is much reduced.
Additionally, we have a dedicated mailing list to deal with support issues.

=item 3

The programs are badly written. Whilst many people simply install these
programs and never look at the code, others will read CGI program code as
a way to learn to write their own CGI programs. We therefore feel it is
important that our scripts reflect the best Perl coding practices. Others
don't share our views and many people have learned very bad coding habits
from reading Matt Wright's code.

=back

=head2 What programs are there available in the collection ?

The exact list will increase over time. Here is the list of what we have
currently available:

=over 4

=item *

B<Countdown>  Count down the time to a certain date

=item *

B<Free For All Links> Simple web link database

=item *

B<Formmail>  Send emails from web forms

=item *

B<Guestbook>  A simple guest book script

=item *

B<Random Image>  Display a random image

=item *

B<Random Links>  Display a random link

=item *

B<Random Text>  Display a randomly chosen piece of text

=item *

B<Simple Search>  Simple web site search engine

=item *

B<SSI Random Image>  Display a random image using SSI

=item *

B<Text Clock>  Display the time

=item *

B<Text Counter> Text counter

=back

=head2 How are the programs licensed ?

The programs are licensed in the same way as Perl itself. That is you are 
free to choose between the GNU Public License
E<lt>http://www.gnu.org/licenses/gpl.htmlE<gt> or the Artistic License
E<lt>http://www.perl.com/pub/a/language/misc/Artistic.htmlE<gt>.

=head2 But I have programs that do the same thing already, why change them ?

Because the programs you may already use aren't as good as these. See
"L<But there are perfectly good programs already out there, why bother ?">
above for more details.

=head2 Why do you keep calling them programs and not scripts ?

The two terms can be interchangeable. We like to use the term "program"
as it carries an implication that the code has been designed more carefully.
The term "scripts" can imply that the code has just been "thrown together"
with no real thought. For CGI programs, this can be very dangerous.

=head2 Why Perl and not (Python|Tcl|Ruby) ?

Because we like Perl :)

But also because Perl is still the most commonly used programming language
for writing CGI programs.

=head2 Why CGI and not (PHP|ASP|Java Servlets) ?

Because CGI is still the most commonly used architecture for dynamic web
pages - despite what you might hear from the marketing departments at
Sun or Microsoft.

=head2 What's with all this XML stuff ? Shouldn't the programs output HTML ?

All of our scripts output valid XHTML. XHMTL is the newest standard for
HTML. It replaces HTML 4.01. We strongly believe that by adhering to 
published standards, our web pages will be more easily viewed by as large
a range of browsers as possible.

XHTML is largely a case of tightening up on some of the bad habits that
HTML let you get away with. All tags must be explicitly closed and all
presentation information is stored in a stylesheet.

=head2 What's this $emulate_matts_code thing all about ?

In some cases, Matt's way of doing things isn't the best. However we've
set ourselves the target that all of our programs should exactly the same
way as Matt's originals. If you set C<$emulate_matts_code> to 1, then
the <nms> script will work exactly the the same way. If you set it to
0, then our script will be free to do some things in a more sensible way, 
but it might not be able to deal with data created with Matt's scripts.

=head2 I've heard that C<use strict;> is gay ..

You shouldn't believe everything that bk tells you :)

C<use strict> (together with C<-w>) is a great way to keep a huge range
of bugs out of your scripts. Even though the I<nms> project team are all
very experienced Perl programmers, we all insist on using them in all of
our scripts. You should too.

=head2 Why don't the programs decode the parameters like other PERL programs ?

Actually it's "Perl", not "PERL" :-)

The vast majority of Perl CGI programs seem to decode the CGI parameters
using a buggy piece of code that probably originated in Matt's scripts.
This code has a number of problems so we don't use it.

Fortunately, since Perl 5.004_04, the Perl distribution has included a
library called CGI.pm which will do all your CGI parameter decoding for you.
Why bother writing your own (potentially buggy) code when there's code right
there that will do it for you?

=head2 Why don't you use C<cgi-lib.pl> like everyone else does ?

C<cgi-lib.pl> was created for writing CGI programs back in the days of Perl 4,
but we've come a long way since then. CGI.pm does all that C<cgi-lib.pl>
did... and much, much more.

=head2 But isn't the CGI module terribly big and slow ?

It's certainly big! But because of the way it's written, only functions that
you actually use will be loaded into memory. This means that it will have 
very little effect on the size or speed of your program.

=head2 What's with all this C<die> stuff all over the programs ?

This is another major problem with many other CGI programs. They always 
assume that everything they try to do will work. For example, if they 
open a file to read some data from it, they don't check that the file was
opened successfully. We believe that it's vitally important to check for 
these things and in many cases the only appropriate action when things go
wrong is to kill the program.

=head2 Isn't C<flock> something that sheep do ?

Yes, but it's also something that you should do every time that you access
a file that can be accessed by other processes. If you're storing data from
a web page in a file and your web page becomes popular, it is likely that
two visitors can be saving data at the same time. If they both try to write
to the file simultaneously, then the file can become corrupted. If they
both try to flock (for "file lock") first, then only the first one will
be successful. The second will be forced to wait until the first unlocks the
file. This leads to many less corrupt files and is therefore a good idea.

