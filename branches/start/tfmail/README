COPYRIGHT

TFMail
Copyright 2002 London Perl Mongers, All rights reserved

LICENSE

This script is free software; you are free to redistribute it
and/or modify it under the same terms as Perl itself.

URL

The most up to date version of this script is available from the nms
script archive at  <http://nms-cgi.sourceforge.net/>

SUMMARY

TFmail is a script which allows you to receive the results of an
HTML form submission via an email message.

TFmail is *not* a plug-in replacement for FormMail.pl, although
it has a lot of the same features.  TFmail is configured via
text files on the server rather than via hidden form fields, has
templates for output, and can support HTTP file uploads.

FILES

In this distribution, you will find the following files:

TFmail.pl      - The main Perl script
NMStreq.pm     - A Perl module that TFmail.pl needs
MIME_Lite.pm   - A Perl module that TFmail.pl needs unless MIME::Lite is
                 installed on the server
default.trc    - The main configuration file
spage.trt      - The template file that controls the layout of the success
                 page
pv_html.trt    - The template file that controls the look of the inputs on
                 the success page
email.trt      - The template file that controls the layout of the email
                 body
pv_email.trt   - The template file that controls the look of the inputs in
                 the email body
README         - This file. Instructions on how to install and use TFmail
ChangeLog      - The change history of these files
MANIFEST       - List of files

SCRIPT CONFIGURATION

There are a number of variables that you can change in TFmail.pl which
alter the way that the program works.

DEBUGGING           - This should be set to 1 whilst you are installing
                      and testing the script. Once the script is live you
                      should change it to 0. When set to 1, errors will
                      be output to the browser. This is a security risk and
                      should not be used when the script is live.

LIBDIR              - The filesystem path to the location of the .pm files
                      that come with TFmail.pl.
		      
MAILPROG            - The path to the sendmail compatible program the the
                      script should invoke to send an outgoing email.  Your
		      hosting provider or system administrator should be
		      able to tell you what to set this variable to.

                      A MAILPROG setting that works for many UNIX-like
                      hosts is:

                        MAILPROG => '/usr/lib/sendmail';

                      Some other UNIX-like hosts need:

                        MAILPROG => '/usr/sbin/sendmail';

MAILPROG_ARGS       - The switches that need to be applied to MAILPROG in
                      order for it to read an e-mail message from STDIN and
		      determine the recipients from the message headers.
		      The defaults will work with any sendmail compatible
		      program, so most people won't need to change this
		      setting.

POSTMASTER          - The email address to use as the 'envelope sender' of
                      outgoing e-mails.  This address will receive the bounce
		      messages if there is trouble delivering an email, so
		      it's important to set this.  If in doubt, set this to
		      your email address.

CONFIG_ROOT         - The filesystem path to the directory that holds all of
                      the configuration files and template files for the script.
		      This must be set to the path to the directory on the
		      server to which you uploaded the .trc and .trt files.

MAX_DEPTH           - The depth of subdirectories under CONFIG_ROOT that
                      configuration files and templates may be placed.  The
		      default of 0 is fine for most people.

CONFIG_EXT          - The file extension that configuration files have.  The
                      default of .trc will work with the sample configuration
		      files supplied.

TEMPLATE_EXT        - The file extension that template files have.  The default
                      of .trt will work with the sample template files supplied.

ENABLE_UPLOADS      - Set this to 1 if you wish to use HTTP file uploads to
                      allow users to upload files via the form and have them 
		      come through to you as attachments to the email.


SCRIPT INSTALLATION

TFmail is installed by copying the file TFmail.pl into your cgi-bin
directory. If you don't know where your cgi-bin directory is, then
please ask your system administrator.

You must also copy NMStreq.pm and MIME_Lite.pm to the server.  You
should put them in the location that you configured for LIBDIR above.
Leaving LIBDIR set to '.' and uploading the .pm files into your
cgi-bin directory will work on most UNIX systems.

You may need to rename TFmail.pl to TFmail.cgi. Again, your system
administrator will know if this is the case.

You will probably need to turn on execute permissions to the file. You can
do this by running the command "chmod +x TFmail.pl" from your command
line. If you don't have command line access to your web server then there
will probably be an equivalent function in your file transfer program.


OUTPUT CUSTOMISATION

The .trt files are templates used by TFmail to generate the output
HTML and the body of the email.  You can edit them to change the
look of the output before uploading them to the CONFIG_ROOT directory.

The character combinations "{=" and "=}" are used to mark template
directives.  Whenever TFmail encounters a template directive, it
replaces it with a value.  For example, the template directive
{= date =} will be replaced with the current date.  There are also
directives for introducing environment variables and CGI form input
values, and a few others.

For example, be default TFmail will use the template email.tft to 
generate the body of the email.  By default that template looks
like this.

%% NMS email template file %%
Below is the result of your feedback form.  It was submitted
{= by_submitter =}on {= date =}.
---------------------------------------------------------------------------

{= param_values =}
---------------------------------------------------------------------------


The first line just tells TFmail that this is indeed a template
file for an email body - it won't be included in the output.

The {= by_submitter =} directive generates the user's email address
and real name followed the the string "by ", if there are email
address and realname inputs in the form.  If TFmail can't work out
the user's email address then the {= by_submitter =} directive
produces nothing.  The "by " string was made part of the directive
output so that the sentence would make sense in either case.

The {= param_values =} directive is special; it produces some output
for every input whose name starts with a number or a letter.  The
actual output is produced by running another template for each CGI
input.  By default, pv_email.trt is used, and the default
pv_email.trt contents are:

%% NMS email template file %%
{= name =}: {= value =}


If everything goes OK and the email is sent, TFmail presents a
success page to the user.  By default, that success page comes
from the spage.trt template file, which defaults to this:

%% NMS html template file %%
<?xml version="1.0" encoding="iso-8859-1"?>
<!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.0 Transitional//EN"
    "http://www.w3.org/TR/xhtml1/DTD/xhtml1-transitional.dtd">
<html xmlns="http://www.w3.org/1999/xhtml">
  <head>
    <title>Thank You</title>
    <link rel="stylesheet" type="text/css" href="/css/nms.css" />
    <style>
       h1.title {
                   text-align : center;
                }
    </style>
  </head>
  <body>
    <h1 class="title">Thank You</h1>
    <p>Below is what you submitted on {= date =}</p>
    <hr size="1" width="75%" />
{= param_values =}
    <hr size="1" width="75%" />
    <p align="center">
      <font size="-1">
        <a href="http://nms-cgi.sourceforge.net/">TFmail</a>
        &copy; 2001  London Perl Mongers
      </font>
    </p>
  </body>
</html>

The {= param_values =} directive uses a different sub-template 
for the inputs when it appears in an html template: pv_html.trt,
which looks like this:

%% NMS html template file %%
<p><b>{= name =}:</b> {= value =}</p>

You can change these templates to anything you like, giving you
full control over the look of the output.  You don't have to
include the {= param_values =} directive or the {= date =}
directive unless you want to.

You can use "param" directives to get at the values of individual
CGI parameters.  The directive {= param.foo =} will output the
value of the "foo" CGI parameter, if there is one.

For example, if your HTML form has only two inputs, "name" and
"age", then your success page template file might look like this:

%% NMS html template file %%
<?xml version="1.0" encoding="iso-8859-1"?>
<!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.0 Transitional//EN"
    "http://www.w3.org/TR/xhtml1/DTD/xhtml1-transitional.dtd">
<html xmlns="http://www.w3.org/1999/xhtml">
  <head>
    <title>Thank You</title>
  </head>
  <body>
    <h1>Thank You {= param.name =}</h1>
    <p>
      Thanks {= param.name =} for registering your age
      as <b>{= param.age =}</b>.  Your results have been
      added to our database.
    </p>
  </body>
</html>

In a similar way, you can access the CGI environment variables
via "env" template directives.  For example:

%% NMS html template file %%
<?xml version="1.0" encoding="iso-8859-1"?>
<!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.0 Transitional//EN"
    "http://www.w3.org/TR/xhtml1/DTD/xhtml1-transitional.dtd">
<html xmlns="http://www.w3.org/1999/xhtml">
  <head>
    <title>Thank You</title>
  </head>
  <body>
    <h1>Thank You {= param.name =}</h1>
    <p>
      Thanks {= param.name =} for registering your age
      as <b>{= param.age =}</b>.  Your results have been
      added to our database.
    </p>
    <p>
      Note: we have logged your IP address as {= env.REMOTE_ADDR =},
      and we will be reporting you to the FBI if you lied about
      your age.  Have a nice day.
    </p.
  </body>
</html>

You can also use these "param" and "env" template directives
in the email template, to get finer control over the body of
the email.


CONFIGURATION FILES

TFmail reads its configuration from a configuration file.  By
default, that file is default.trc in whatever directory you set
for CONFIG_ROOT above.

If you have several forms on your site using TFmail, each will
need its own configuration file.  You can control TFmail's choice
of configuration file via the "_config" hidden form field.  For
example, if you added the line:

  <input type="hidden" name="_config" value="foo" />

to one of your HTML forms, then TFmail would use foo.tfc in the
CONFIG_ROOT directory as its configuration file when processing
that form.

The choice of configuration file is the only thing that can be
configured via a hidden form field.

The first line of the configuration file has to be exactly the
text:

  %% NMS configuration file %%

Lines starting with '#' are ignored, and configuration values
are set by putting the name of the configuration setting at
the start of a line, followed by a ':' character, followed by
the value for that setting.  The value can be split over
several lines.

One configuration value that you must set is "recipient", the
email address to which the form results should be mailed.  For
example, your configuration file might look like:

%% NMS configuration file %%
#
# This is my configuration file
#
recipient: me@my.domain

You can have several recipients set, in which case the form
results will be copied to all of them:

%% NMS configuration file %%
#
# This is my configuration file
#
recipient: me@my.domain, some-else@my.domain

Other things that can be set in the configuration file are:

email_template              - The template file to use for the body
                              of the email.  Default: email

success_page_template       - The template file to use for the main
                              HTML success page, displayed when the
			      email has been sent.  Default: spage

param_values_html_template  - The template file to use for each
                              CGI input when a {= param_values =}
			      directive is encountered in an HTML
			      page template.  Default: pv_html

param_values_email_template - The template file to use for each
                              CGI input when a {= param_values =}
			      directive is encountered in an email
			      body template.  Default: pv_email

sort                        - This sets the order in which the
                              {= param_values =} directive processes the CGI
			      parameters.  It can be the string 'alphabetic'
                              for alphabetic order, or the string "order:"
                              followed by a comma separated list of the 
			      parameter names.  Default: the parameters are
			      output in the order in which they occur in the
			      HTTP request.

print_blank_fields          - If this is set to a true value then fields that
                              the user left blank will be visited by the
			      {= param_values =} directive.  Normally, blank
			      fields are suppressed to save space.  Default: 0

subject                     - The subject for the email.  Default:
                              "WWW Form Submission".

email_input                 - The name of the CGI parameter that 
                              will hold the user's email address.
			      Used by TFmail to set the From field
			      of the email.  Default: no email_input,
			      the mail comes from POSTMASTER.

realname_input              - The name of the CGI parameter that will
                              hold the user's full name.  Used by
			      TFmail to set the comment part of the
			      From field of the email if a valid
			      email address was found in the
			      email_input input.  Default: none, so
			      there will be no comment on the From
			      address.

redirect                    - If this configuration value is set, then it
                              must be a URL, TFmail will generate a redirect
			      to that URL on success, instead of using the
			      success page template.

required                    - A list of the names of inputs that the
                              user cannot leave blank.  If any of these
			      are blank, then the submission will not be
			      accepted.  Default: no fields are required.

missing_template            - The HTML template file used to generate the
                              page that the user sees if they leave a
			      required field blank.  Default: missing

missing_fields_redirect     - If this configuration value is set then
                              it must be a URL and TFmail will generate
			      a redirect to that URL instead of using a
			      template if the user leaves a required
			      field blank.

confirmation_template       - If this field is set then it must be the
                              name of an email template that will be used
			      to send a mail back to the user confirming
			      their submission.  CAUTION: since the user
			      could give any email address (not just their
			      own) and submit repeatedly, there is risk that
			      some nasty person will use this to mailbomb
			      a third party.  Only switch this on if you
			      really need it.  Template directives that
			      depend on user input will be disabled for this
			      template, so that this feature can't be used to
			      send SPAM.  Default: no confirmation email.

confirmation_subject        - The subject for the confirmation email, if it
                              is activated by the confirmation_template
			      directive above.


FILE UPLOADS

To enable file uploads, you will need to set the ENABLE_UPLOADS constant
in the script to 1.  You will also need to set the correct encoding in
your HTML form:

<form method="post" enctype="multipart/form-data" action="/cgi-bin/TFmail.pl">
...

...and you will need to configure one or more inputs to be file uploads
in your configuration file.  The configuration directive to make an
input act as a file upload is upload_*, with the * replaced by the name
of the inputs.  The value is a list of acceptable file extensions for
the uploaded file, with the last one being the default that gets used
if the uploaded file has another extension.

For example, suppose you want the user to be able to upload a picture.
You might put in the configuration file:

upload_picture: gif gpj gpeg png xxx

and you might put in the HTML form:

  A picture of yourself:
  <input type="file" name="picture" />


SUPPORT

For support of this script please email:

  <nms-cgi-support@lists.sourceforge.net>

